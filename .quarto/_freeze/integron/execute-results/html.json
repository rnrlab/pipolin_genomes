{
  "hash": "a13c29d03ae5a1bcc5f1df4dde272157",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Integron Finder\"\nauthor: \"Guillermo Cerrillo\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rebus' was built under R version 4.3.3\n```\n\n\n:::\n:::\n\n\n# Filtering\n\nPrevio al integron_finder hemos corrido otro script llamado integron_filtering para realizar un cribado preeliminar de nuestros genomas. Desde la consola de Linux ejecutamos primero el archivo [integron_filtering.sh](integron_filtering.sh) que, una vez terminada su función, activará otro archivo llamado [genome_filter.py](genome_filter.py).\n\n## Files - Testing\n\nAnalizando resultados de integron_finder con R (prueba con 5 genomas aleatorios) :\n\n-   Obtenemos la lista de los archivos a analizar con `list_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")`\n\n<!-- -->\n\n-   Creamos un df vacío para agregar los resultados `summary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))`\n\n    -   La fila vacía la eliminaremos después de obtener todo los ressultados `summary_df <- summary_df %>% na.omit()` (Paquete tidyverse)\n\n<!-- -->\n\n-   Hacemos un bucle for para leer todos los documentos de la lista:\n\n    -   Importante en `read.table` añadir `skip=1` para omitir la primera línea de texto y `header=T` para que tod esté en su sitio.\n\n    -   Para obtener el número de genoma, usamos la función `str_extract()` (paquete stringr) con el patrón `pattern = \"G_[0-9]+\"`\n\n    -   Por cada archivo, obtenemos un df temporal con su G_ID y la suma de cada columna con `sum(file$column)`\n\n    -   Añadidimos este df al creado anteriormente como una nueva fila con `summary_df[nrow(summary_df) + 1,] <- df_temp`\n\n<!-- -->\n\n-   Al acabar el bucle, podemos eliminar el df_temp y el objeto de lectura para mantener el environment organizado\n\n<!-- -->\n\n-   Abrimos los datos taxonómicos que se encuentran en `pipolin_summary_new.tsv` y usamos `merge()` para añadirlos a nuestro df\n\n    -   De pipolin_summary_new.tsv sólo nos interesant las columnas Genome_ID \\[3\\] y Genus_rev \\[34\\]\n\n<!-- -->\n\n-   Usaremos `stack()` para obtener 2 columnas (Count e integron_type) con la que más tarde podremos dividir el gráfico en 3 (CALIN, complete e In0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npipolin_summary <- read_tsv(\"pipolin_summary_new.tsv\")\ntaxonomy_data <- pipolin_summary[,c(3,34,38:44)]\nrm(pipolin_summary)\ntaxonomy_data <- taxonomy_data[,c(1,2)]\nsummary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))\nlist_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")\n\nfor (k in 1:length(list_summary)){\n  summary <- read.table(list_summary[k], sep=\"\\t\", skip = 1, header = T)\n  G_ID <- str_extract(string = summary$ID_replicon[1], pattern = \"G_[0-9]+\")\n  df <- data.frame(\"Genome_ID\" = c(G_ID), \"CALIN\" = c(sum(summary$CALIN)), \"complete\" = c(sum(summary$complete)), \"In0\" = c(sum(summary$In0)))\n  summary_df[nrow(summary_df) + 1,] <- df\n}\n\nrm(df, summary)\nsummary_df <- summary_df %>% na.omit()\nmerged_df <- merge(summary_df, taxonomy_data, by=\"Genome_ID\")\nstacked <- cbind(summary_df$Genome_ID,stack(summary_df[,2:4]),merged_df$Genus_rev)\nnames(stacked) <- c(\"Genome_ID\",\"Count\",\"Integron_type\",\"Genus_rev\")\n```\n:::\n\n\n## Plots - Testing\n\nHacemos un gráfico de barras con `ggplot()` que muestre en el eje x la cantidad de integrones y en el eje y en porcentaje de genomas que tienen esa cantidad de integrones:\n\n-   Para evitar números decimales en el eje x podemos usar `scale_x_continuous(breaks=c(0,1,2)`\n\n-   Los números en el vector breaks serán aquellos que aparezcan el la columna Count del df stacked\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(stacked, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n```\n\n::: {.cell-output-display}\n![](integron_files/figure-html/plots-test-1.png){width=672}\n:::\n:::\n\n\n## Files - Final\n\nEstos datos fueron obtenidos con el ordenador del laboratorio, pero usando el mismo código que el que se empleó antes. Para reducir el tamaño del gráfico podemos usar el paquete `rebus()`. Así juntamos todos los valores mayores que 10 en uno que interpretaremos como \"Más de 10 integrones\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegron_summary <- read.csv(\"integron_summary.csv\", stringsAsFactors = F)\nnew_summary <- integron_summary\ninterval <- number_range(11,100)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in char_range(d[1, 1], d[nrow(d), 1]): 'lo' and 'hi' are the same\nvalue.  Return 'lo'.\n```\n\n\n:::\n\n```{.r .cell-code}\nnew_summary$Count[which(grepl(interval,integron_summary$Count)==T)]<-11\n```\n:::\n\n\n## Plots - Final\n\nLos gráficos que se muestran a continuación son 1.- Aquel que muestra toda la información al completo y 2.- Aquel en el que agrupamos todos los resutlados mayores que 10 en uno solo (\\>10).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(integron_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n```\n\n::: {.cell-output-display}\n![](integron_files/figure-html/plots-final-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(new_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11), labels = c(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\">10\"))\n```\n\n::: {.cell-output-display}\n![](integron_files/figure-html/plots-final-2.png){width=672}\n:::\n:::\n\n\n## Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.2 (2023-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=Spanish_Spain.utf8  LC_CTYPE=Spanish_Spain.utf8   \n[3] LC_MONETARY=Spanish_Spain.utf8 LC_NUMERIC=C                  \n[5] LC_TIME=Spanish_Spain.utf8    \n\ntime zone: Europe/Madrid\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] rebus_0.1-3     lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1  \n [5] dplyr_1.1.4     purrr_1.0.2     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    tidyverse_2.0.0 ggplot2_3.4.4  \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4            generics_0.1.3        stringi_1.8.2        \n [4] hms_1.1.3             digest_0.6.33         magrittr_2.0.3       \n [7] evaluate_0.23         grid_4.3.2            timechange_0.2.0     \n[10] fastmap_1.1.1         jsonlite_1.8.8        rebus.datetimes_0.0-2\n[13] fansi_1.0.5           scales_1.3.0          cli_3.6.1            \n[16] rlang_1.1.2           crayon_1.5.2          bit64_4.0.5          \n[19] munsell_0.5.0         withr_2.5.2           yaml_2.3.7           \n[22] tools_4.3.2           parallel_4.3.2        tzdb_0.4.0           \n[25] colorspace_2.1-0      rebus.base_0.0-3      vctrs_0.6.4          \n[28] R6_2.5.1              lifecycle_1.0.4       htmlwidgets_1.6.3    \n[31] bit_4.0.5             vroom_1.6.4           pkgconfig_2.0.3      \n[34] pillar_1.9.0          gtable_0.3.4          glue_1.6.2           \n[37] xfun_0.41             tidyselect_1.2.0      rstudioapi_0.15.0    \n[40] rebus.numbers_0.0-1   knitr_1.45            farver_2.1.1         \n[43] htmltools_0.5.7       labeling_0.4.3        rmarkdown_2.25       \n[46] rebus.unicode_0.0-2   compiler_4.3.2       \n```\n\n\n:::\n:::\n",
    "supporting": [
      "integron_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}