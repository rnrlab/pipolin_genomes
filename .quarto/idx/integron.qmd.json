{"title":"Integron Finder","markdown":{"yaml":{"title":"Integron Finder","author":"Guillermo Cerrillo","format":"html","editor":"visual"},"headingText":"Filtering","containsRefs":false,"markdown":"\n\n```{r}\n#| label: load-packages\n#| message: false\n#| echo: false\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(rebus)\n```\n\n\nPrevio al integron_finder hemos corrido otro script llamado integron_filtering para realizar un cribado preeliminar de nuestros genomas. Desde la consola de Linux ejecutamos primero el archivo [integron_filtering.sh](integron_filtering.sh) que, una vez terminada su función, activará otro archivo llamado [genome_filter.py](genome_filter.py).\n\n## Files - Testing\n\nAnalizando resultados de integron_finder con R (prueba con 5 genomas aleatorios) :\n\n-   Obtenemos la lista de los archivos a analizar con `list_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")`\n\n<!-- -->\n\n-   Creamos un df vacío para agregar los resultados `summary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))`\n\n    -   La fila vacía la eliminaremos después de obtener todo los ressultados `summary_df <- summary_df %>% na.omit()` (Paquete tidyverse)\n\n<!-- -->\n\n-   Hacemos un bucle for para leer todos los documentos de la lista:\n\n    -   Importante en `read.table` añadir `skip=1` para omitir la primera línea de texto y `header=T` para que tod esté en su sitio.\n\n    -   Para obtener el número de genoma, usamos la función `str_extract()` (paquete stringr) con el patrón `pattern = \"G_[0-9]+\"`\n\n    -   Por cada archivo, obtenemos un df temporal con su G_ID y la suma de cada columna con `sum(file$column)`\n\n    -   Añadidimos este df al creado anteriormente como una nueva fila con `summary_df[nrow(summary_df) + 1,] <- df_temp`\n\n<!-- -->\n\n-   Al acabar el bucle, podemos eliminar el df_temp y el objeto de lectura para mantener el environment organizado\n\n<!-- -->\n\n-   Abrimos los datos taxonómicos que se encuentran en `pipolin_summary_new.tsv` y usamos `merge()` para añadirlos a nuestro df\n\n    -   De pipolin_summary_new.tsv sólo nos interesant las columnas Genome_ID \\[3\\] y Genus_rev \\[34\\]\n\n<!-- -->\n\n-   Usaremos `stack()` para obtener 2 columnas (Count e integron_type) con la que más tarde podremos dividir el gráfico en 3 (CALIN, complete e In0)\n\n```{r}\n#| label: files-test\n#| message: false\npipolin_summary <- read_tsv(\"pipolin_summary_new.tsv\")\ntaxonomy_data <- pipolin_summary[,c(3,34,38:44)]\nrm(pipolin_summary)\ntaxonomy_data <- taxonomy_data[,c(1,2)]\nsummary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))\nlist_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")\n\nfor (k in 1:length(list_summary)){\n  summary <- read.table(list_summary[k], sep=\"\\t\", skip = 1, header = T)\n  G_ID <- str_extract(string = summary$ID_replicon[1], pattern = \"G_[0-9]+\")\n  df <- data.frame(\"Genome_ID\" = c(G_ID), \"CALIN\" = c(sum(summary$CALIN)), \"complete\" = c(sum(summary$complete)), \"In0\" = c(sum(summary$In0)))\n  summary_df[nrow(summary_df) + 1,] <- df\n}\n\nrm(df, summary)\nsummary_df <- summary_df %>% na.omit()\nmerged_df <- merge(summary_df, taxonomy_data, by=\"Genome_ID\")\nstacked <- cbind(summary_df$Genome_ID,stack(summary_df[,2:4]),merged_df$Genus_rev)\nnames(stacked) <- c(\"Genome_ID\",\"Count\",\"Integron_type\",\"Genus_rev\")\n```\n\n## Plots - Testing\n\nHacemos un gráfico de barras con `ggplot()` que muestre en el eje x la cantidad de integrones y en el eje y en porcentaje de genomas que tienen esa cantidad de integrones:\n\n-   Para evitar números decimales en el eje x podemos usar `scale_x_continuous(breaks=c(0,1,2)`\n\n-   Los números en el vector breaks serán aquellos que aparezcan el la columna Count del df stacked\n\n```{r}\n#| label: plots-test\nggplot(stacked, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n```\n\n## Files - Final\n\nEstos datos fueron obtenidos con el ordenador del laboratorio, pero usando el mismo código que el que se empleó antes. Para reducir el tamaño del gráfico podemos usar el paquete `rebus()`. Así juntamos todos los valores mayores que 10 en uno que interpretaremos como \"Más de 10 integrones\":\n\n```{r}\n#| label: files-final\n#| message: false\nintegron_summary <- read.csv(\"integron_summary.csv\", stringsAsFactors = F)\nnew_summary <- integron_summary\ninterval <- number_range(11,100)\nnew_summary$Count[which(grepl(interval,integron_summary$Count)==T)]<-11\n```\n\n## Plots - Final\n\nLos gráficos que se muestran a continuación son 1.- Aquel que muestra toda la información al completo y 2.- Aquel en el que agrupamos todos los resutlados mayores que 10 en uno solo (\\>10).\n\n```{r}\n#| label: plots-final\nggplot(integron_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n\nggplot(new_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11), labels = c(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\">10\"))\n```\n\n## Session Info\n\n```{r}\n#| label: session-info\n#| echo: false\nsessionInfo()\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: load-packages\n#| message: false\n#| echo: false\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(rebus)\n```\n\n# Filtering\n\nPrevio al integron_finder hemos corrido otro script llamado integron_filtering para realizar un cribado preeliminar de nuestros genomas. Desde la consola de Linux ejecutamos primero el archivo [integron_filtering.sh](integron_filtering.sh) que, una vez terminada su función, activará otro archivo llamado [genome_filter.py](genome_filter.py).\n\n## Files - Testing\n\nAnalizando resultados de integron_finder con R (prueba con 5 genomas aleatorios) :\n\n-   Obtenemos la lista de los archivos a analizar con `list_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")`\n\n<!-- -->\n\n-   Creamos un df vacío para agregar los resultados `summary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))`\n\n    -   La fila vacía la eliminaremos después de obtener todo los ressultados `summary_df <- summary_df %>% na.omit()` (Paquete tidyverse)\n\n<!-- -->\n\n-   Hacemos un bucle for para leer todos los documentos de la lista:\n\n    -   Importante en `read.table` añadir `skip=1` para omitir la primera línea de texto y `header=T` para que tod esté en su sitio.\n\n    -   Para obtener el número de genoma, usamos la función `str_extract()` (paquete stringr) con el patrón `pattern = \"G_[0-9]+\"`\n\n    -   Por cada archivo, obtenemos un df temporal con su G_ID y la suma de cada columna con `sum(file$column)`\n\n    -   Añadidimos este df al creado anteriormente como una nueva fila con `summary_df[nrow(summary_df) + 1,] <- df_temp`\n\n<!-- -->\n\n-   Al acabar el bucle, podemos eliminar el df_temp y el objeto de lectura para mantener el environment organizado\n\n<!-- -->\n\n-   Abrimos los datos taxonómicos que se encuentran en `pipolin_summary_new.tsv` y usamos `merge()` para añadirlos a nuestro df\n\n    -   De pipolin_summary_new.tsv sólo nos interesant las columnas Genome_ID \\[3\\] y Genus_rev \\[34\\]\n\n<!-- -->\n\n-   Usaremos `stack()` para obtener 2 columnas (Count e integron_type) con la que más tarde podremos dividir el gráfico en 3 (CALIN, complete e In0)\n\n```{r}\n#| label: files-test\n#| message: false\npipolin_summary <- read_tsv(\"pipolin_summary_new.tsv\")\ntaxonomy_data <- pipolin_summary[,c(3,34,38:44)]\nrm(pipolin_summary)\ntaxonomy_data <- taxonomy_data[,c(1,2)]\nsummary_df<-data.frame(\"Genome_ID\" = c(NA), \"CALIN\" = c(NA), \"complete\" = c(NA), \"In0\" = c(NA))\nlist_summary <- list.files(recursive=TRUE, pattern = \"\\\\.summary$\")\n\nfor (k in 1:length(list_summary)){\n  summary <- read.table(list_summary[k], sep=\"\\t\", skip = 1, header = T)\n  G_ID <- str_extract(string = summary$ID_replicon[1], pattern = \"G_[0-9]+\")\n  df <- data.frame(\"Genome_ID\" = c(G_ID), \"CALIN\" = c(sum(summary$CALIN)), \"complete\" = c(sum(summary$complete)), \"In0\" = c(sum(summary$In0)))\n  summary_df[nrow(summary_df) + 1,] <- df\n}\n\nrm(df, summary)\nsummary_df <- summary_df %>% na.omit()\nmerged_df <- merge(summary_df, taxonomy_data, by=\"Genome_ID\")\nstacked <- cbind(summary_df$Genome_ID,stack(summary_df[,2:4]),merged_df$Genus_rev)\nnames(stacked) <- c(\"Genome_ID\",\"Count\",\"Integron_type\",\"Genus_rev\")\n```\n\n## Plots - Testing\n\nHacemos un gráfico de barras con `ggplot()` que muestre en el eje x la cantidad de integrones y en el eje y en porcentaje de genomas que tienen esa cantidad de integrones:\n\n-   Para evitar números decimales en el eje x podemos usar `scale_x_continuous(breaks=c(0,1,2)`\n\n-   Los números en el vector breaks serán aquellos que aparezcan el la columna Count del df stacked\n\n```{r}\n#| label: plots-test\nggplot(stacked, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n```\n\n## Files - Final\n\nEstos datos fueron obtenidos con el ordenador del laboratorio, pero usando el mismo código que el que se empleó antes. Para reducir el tamaño del gráfico podemos usar el paquete `rebus()`. Así juntamos todos los valores mayores que 10 en uno que interpretaremos como \"Más de 10 integrones\":\n\n```{r}\n#| label: files-final\n#| message: false\nintegron_summary <- read.csv(\"integron_summary.csv\", stringsAsFactors = F)\nnew_summary <- integron_summary\ninterval <- number_range(11,100)\nnew_summary$Count[which(grepl(interval,integron_summary$Count)==T)]<-11\n```\n\n## Plots - Final\n\nLos gráficos que se muestran a continuación son 1.- Aquel que muestra toda la información al completo y 2.- Aquel en el que agrupamos todos los resutlados mayores que 10 en uno solo (\\>10).\n\n```{r}\n#| label: plots-final\nggplot(integron_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous()\n\nggplot(new_summary, aes(x=Count)) +\n  geom_bar(aes(y = after_stat(count)/(18462/3), fill = Genus_rev, alpha=0.1), stat = \"count\", col = \"black\", alpha = 0.6) +\n  facet_grid(.~Integron_type, scale=\"free\",space=\"free\") + scale_y_continuous(labels=scales::percent) + xlab(\"nº of INTEGRONS\") + ylab(\"Relative Freq\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = \"bold\")) + scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11), labels = c(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\">10\"))\n```\n\n## Session Info\n\n```{r}\n#| label: session-info\n#| echo: false\nsessionInfo()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"integron.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","editor":"visual","theme":"cosmo","title":"Integron Finder","author":"Guillermo Cerrillo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}